"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var log_1 = __importDefault(require("../log"));
var rpc = __importStar(require("../xapi/rpc"));
var BackendImpl = (function (_super) {
    __extends(BackendImpl, _super);
    function BackendImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.requests = {};
        return _this;
    }
    Object.defineProperty(BackendImpl.prototype, "isReady", {
        get: function () {
            return Promise.resolve(true);
        },
        enumerable: false,
        configurable: true
    });
    BackendImpl.prototype.close = function () {
    };
    BackendImpl.prototype.execute = function (request) {
        var _this = this;
        var id = request.id;
        var type = this.getRequestType(request);
        var handlerName = type + "()";
        var handler = typeof this[handlerName] === 'function'
            ? this[handlerName]
            : this.defaultHandler;
        return this.isReady
            .then(function () {
            var promise = new Promise(function (resolve) {
                _this.requests[id] = resolve;
            });
            var sender = function (cmd, body) {
                _this.send(id, cmd, body);
                return promise;
            };
            log_1.default.debug('[backend] (request):', request);
            var result = handler.call(_this, request, sender);
            return Promise.resolve(result);
        })
            .then(function (result) {
            log_1.default.debug('[backend] (success):', result);
            _this.emit('data', rpc.createResponse(id, result));
        })
            .catch(function (error) {
            log_1.default.debug('[backend] (failure):', error);
            _this.emit('data', rpc.createErrorResponse(id, error));
        });
    };
    BackendImpl.prototype.onFeedback = function (result) {
        this.emit('data', rpc.createRequest(null, 'xFeedback/Event', result));
    };
    BackendImpl.prototype.onResult = function (id, result) {
        if (id) {
            var resolve = this.requests[id];
            delete this.requests[id];
            resolve(result);
        }
    };
    BackendImpl.prototype.send = function (id, command, body) {
        throw new Error('Backend class must override .send()');
    };
    BackendImpl.prototype.defaultHandler = function (_a, send) {
        var method = _a.method;
        return Promise.reject(new Error("Invalid request method: " + method));
    };
    BackendImpl.prototype.getRequestType = function (_a) {
        var method = _a.method;
        if (method.startsWith('xCommand')) {
            return 'xCommand';
        }
        return method;
    };
    return BackendImpl;
}(events_1.EventEmitter));
exports.default = BackendImpl;
