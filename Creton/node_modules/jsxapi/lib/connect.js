"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalDefaults = void 0;
var url_parse_1 = __importDefault(require("url-parse"));
var log_1 = __importDefault(require("./log"));
exports.globalDefaults = {
    command: '',
    host: '',
    loglevel: 'warn',
    password: '',
    port: 0,
    protocol: '',
    username: 'admin',
};
function resolveOptions(targetDefaults, url, options) {
    var realOpts = __assign(__assign({}, exports.globalDefaults), targetDefaults);
    var urlWithProto = url.match(/^\w+:\/\//)
        ? url
        : realOpts.protocol + "//" + url;
    var parsedUrl = new url_parse_1.default(urlWithProto);
    Object.keys(realOpts).forEach(function (key) {
        var value = [
            options[key],
            key === 'host' ? parsedUrl.hostname : parsedUrl[key],
        ].filter(function (v) { return !!v; })[0];
        if (value) {
            realOpts[key] = value;
        }
    });
    return realOpts;
}
function connectOverload(initBackend, defaults) {
    return function (xapi) { return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var url;
        var options;
        if (args.length === 1 && typeof args[0] === 'object') {
            options = args[0];
            url = '';
        }
        else if (args.length === 1 && typeof args[0] === 'string') {
            options = exports.globalDefaults;
            url = args[0];
        }
        else if (args.length === 2) {
            url = args[0];
            options = args[1];
        }
        else {
            throw new Error("Invalid arguments to connect");
        }
        var opts = resolveOptions(defaults, url, options);
        log_1.default.setLevel(opts.loglevel);
        log_1.default.debug('using options:', opts);
        log_1.default.info('connecting to', url);
        var backend = initBackend(opts);
        return new xapi(backend);
    }; };
}
exports.default = connectOverload;
