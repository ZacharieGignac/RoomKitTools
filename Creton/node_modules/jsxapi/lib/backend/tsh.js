"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_parser_1 = require("../json-parser");
var log_1 = __importDefault(require("../log"));
var rpc = __importStar(require("../xapi/rpc"));
var _1 = __importDefault(require("./"));
function formatValue(value) {
    switch (typeof value) {
        case 'boolean':
            return value ? 'True' : 'False';
        case 'number':
        case 'string':
            return JSON.stringify(value);
        default:
            throw new TypeError("Invalid value " + JSON.stringify(value));
    }
}
function paramString(key, value) {
    var values = Array.isArray(value) ? value : [value];
    return values.map(function (v) { return key + ": " + formatValue(v); }).join(' ');
}
var TSHBackend = (function (_super) {
    __extends(TSHBackend, _super);
    function TSHBackend(transport) {
        var _this = _super.call(this) || this;
        _this.transport = transport;
        _this.feedbackQueries = {};
        _this.nextFeedbackId = 0;
        _this.parser = new json_parser_1.JSONParser();
        _this.buffer = '';
        _this.state = 'idle';
        _this.connectResolve = function () {
        };
        _this.parser.on('data', _this.onParserData.bind(_this));
        _this.parser.on('error', function (error) { return _this.emit('error', error); });
        Object.defineProperty(_this, 'isReady', {
            configurable: false,
            enumerable: true,
            value: new Promise(function (resolve, reject) {
                if (_this.state !== 'idle') {
                    reject(new Error('TSHBackend is not in an idle state'));
                    return;
                }
                _this.connectResolve = resolve;
                _this.setState('connecting');
            }),
            writable: false,
        });
        _this.transport
            .on('data', function (data) { return _this.onTransportData(data); })
            .on('error', function (error) { return _this.emit('error', error); })
            .on('close', function () {
            _this.setState('closed');
            _this.emit('close');
        });
        return _this;
    }
    TSHBackend.prototype.close = function () {
        this.transport.close();
    };
    TSHBackend.prototype.send = function (id, command, body) {
        var cmd = command + " | resultId=\"" + id + "\"\n";
        if (body !== undefined) {
            cmd += body + "\n";
            var length_1 = Buffer.byteLength(cmd, 'utf8');
            cmd = "{" + length_1 + "} \n" + cmd;
        }
        this.write(cmd);
    };
    TSHBackend.prototype.onTransportData = function (data) {
        switch (this.state) {
            case 'connecting':
                if (this.bufferHasOK(data)) {
                    log_1.default.debug('[transport] (connecting)', data.toString());
                    this.setState('initializing');
                    this.write('echo off\n');
                    this.emit('initializing');
                }
                break;
            case 'initializing':
                if (this.bufferHasOK(data)) {
                    log_1.default.debug('[transport] (initializing)', data.toString());
                    this.buffer = '';
                    this.write('xpreferences outputmode json\n');
                    this.setState('ready');
                    this.connectResolve(true);
                    this.emit('ready');
                }
                break;
            case 'ready':
                log_1.default.debug("to parser: \"" + data.toString() + "\"");
                this.parser.write(data);
                break;
            default:
                this.emit('error', new Error('TSHBackend is in an invalid state for input'));
        }
    };
    TSHBackend.prototype.bufferHasOK = function (buffer) {
        var lines = (this.buffer + buffer.toString()).split('\n');
        if (lines.length) {
            this.buffer = lines[lines.length - 1];
        }
        return lines.some(function (line) { return line === 'OK'; });
    };
    TSHBackend.prototype.setState = function (newState) {
        this.state = newState;
    };
    TSHBackend.prototype.onParserData = function (data) {
        if (!{}.hasOwnProperty.call(data, 'ResultId')) {
            log_1.default.debug('[tsh] (feedback):', JSON.stringify(data));
            this.onFeedback(rpc.parseFeedbackResponse(data));
        }
        else {
            log_1.default.debug('[tsh] (result):', JSON.stringify(data));
            this.onResult(data.ResultId, data);
        }
    };
    TSHBackend.prototype.write = function (data) {
        log_1.default.debug("write: " + JSON.stringify(data));
        this.transport.write(data);
    };
    TSHBackend.prototype['xCommand()'] = function (_a, send) {
        var method = _a.method, params = _a.params;
        var paramsCopy = Object.assign({}, params);
        var body = paramsCopy.body;
        delete paramsCopy.body;
        var tshParams = paramsCopy
            ? Object.keys(paramsCopy)
                .sort()
                .map(function (k) { return paramString(k, paramsCopy[k]); })
            : [];
        var cmd = method
            .split('/')
            .concat(tshParams)
            .join(' ');
        return send(cmd, body).then(rpc.createCommandResponse);
    };
    TSHBackend.prototype['xDoc()'] = function (request, send) {
        var _a = request.params, Path = _a.Path, Type = _a.Type;
        var tshParams = {
            Format: 'JSON',
            Path: Path.join('/'),
            Schema: Type === 'Schema' ? 'True' : 'False',
        };
        var paramsStr = Object.keys(tshParams)
            .sort()
            .map(function (k) { return paramString(k, tshParams[k]); })
            .join(' ');
        return send("xDocument " + paramsStr).then(function (response) {
            return rpc.createDocumentResponse(request, response);
        });
    };
    TSHBackend.prototype['xFeedback/Subscribe()'] = function (_a, send) {
        var _this = this;
        var params = _a.params;
        var query = params.Query.map(function (part) {
            return typeof part === 'number' ? "[" + part + "]" : "/" + part;
        }).join('');
        return send("xfeedback register " + query).then(function () {
            var id = _this.nextFeedbackId;
            _this.nextFeedbackId += 1;
            _this.feedbackQueries[id] = query;
            return { Id: id };
        });
    };
    TSHBackend.prototype['xFeedback/Unsubscribe()'] = function (_a, send) {
        var _this = this;
        var params = _a.params;
        var id = params.Id;
        if (!{}.hasOwnProperty.call(this.feedbackQueries, id)) {
            throw new Error("Invalid feedback id: " + id);
        }
        var path = this.feedbackQueries[id];
        return send("xfeedback deregister " + path).then(function () {
            delete _this.feedbackQueries[id];
            return true;
        });
    };
    TSHBackend.prototype['xGet()'] = function (request, send) {
        var path = request.params.Path.join(' ');
        return send("x" + path).then(function (response) {
            return rpc.createGetResponse(request, response);
        });
    };
    TSHBackend.prototype['xSet()'] = function (request, send) {
        var params = request.params;
        var path = params.Path.join(' ');
        var value = formatValue(params.Value);
        return send("x" + path + ": " + value).then(function (response) {
            return rpc.createSetResponse(request, response);
        });
    };
    return TSHBackend;
}(_1.default));
exports.default = TSHBackend;
