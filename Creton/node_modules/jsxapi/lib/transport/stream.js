"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var stream_1 = require("stream");
var StreamTransport = (function (_super) {
    __extends(StreamTransport, _super);
    function StreamTransport(send, options) {
        var _this = _super.call(this, options) || this;
        _this.send = send;
        _this.buffer = [];
        _this.canPush = false;
        _this.on('finish', function () {
            _this.emit('close');
        });
        return _this;
    }
    StreamTransport.prototype.push = function (data) {
        this.buffer.push(data);
        return this.attemptFlush();
    };
    StreamTransport.prototype._read = function () {
        this.canPush = true;
        this.attemptFlush();
    };
    StreamTransport.prototype._write = function (chunk, encoding, callback) {
        this.send(chunk, encoding, callback);
    };
    StreamTransport.prototype.close = function () {
        this.end();
    };
    StreamTransport.prototype.attemptFlush = function () {
        while (this.canPush && this.buffer.length) {
            this.canPush = _super.prototype.push.call(this, this.buffer.shift());
        }
        return this.canPush;
    };
    return StreamTransport;
}(stream_1.Duplex));
exports.default = StreamTransport;
