"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSetResponse = exports.createGetResponse = exports.createDocumentResponse = exports.createCommandResponse = exports.parseFeedbackResponse = exports.createErrorResponse = exports.createResponse = exports.createRequest = exports.collapse = void 0;
var exc_1 = require("./exc");
var scalars = ['number', 'string'];
var isScalar = function (value) { return scalars.indexOf(typeof value) >= 0; };
var VERSION = '2.0';
function collapse(data) {
    if (Array.isArray(data)) {
        return data.map(collapse);
    }
    if (isScalar(data)) {
        return data;
    }
    if ({}.hasOwnProperty.call(data, 'Value') && isScalar(data.Value)) {
        return data.Value;
    }
    var result = {};
    Object.keys(data).forEach(function (key) {
        result[key] = collapse(data[key]);
    });
    return result;
}
exports.collapse = collapse;
function createRequest(id, method, params) {
    var request = { jsonrpc: VERSION, method: method };
    if (id) {
        request.id = id;
    }
    if (params) {
        request.params = {};
        Object.keys(params).forEach(function (key) {
            var value = params[key];
            if (key !== 'body' &&
                typeof value === 'string' &&
                value.indexOf('\n') !== -1) {
                throw new Error('Parameters may not contain newline characters');
            }
            request.params[key] = params[key];
        });
    }
    return request;
}
exports.createRequest = createRequest;
function createResponse(id, result) {
    return { jsonrpc: VERSION, id: id, result: result };
}
exports.createResponse = createResponse;
function createErrorResponse(id, error) {
    var payload;
    if (error instanceof exc_1.XAPIError) {
        payload = {
            code: error.code,
            message: error.message,
        };
    }
    else {
        payload = {
            code: exc_1.UNKNOWN_ERROR,
            message: (error.message || error).toString(),
        };
    }
    if ({}.hasOwnProperty.call(error, 'data')) {
        payload.data = error.data;
    }
    return { jsonrpc: VERSION, id: id, error: payload };
}
exports.createErrorResponse = createErrorResponse;
function parseFeedbackResponse(response) {
    return collapse(response);
}
exports.parseFeedbackResponse = parseFeedbackResponse;
function assertResponseSuccess(response) {
    var keys = Object.keys(response).filter(function (k) { return k !== 'ResultId'; });
    if (keys.length > 1) {
        throw new exc_1.XAPIError(exc_1.INVALID_RESPONSE, "Invalid command response: Wrong number of keys (" + keys.length + ")");
    }
    if ({}.hasOwnProperty.call(response, 'CommandResponse')) {
        return assertResponseSuccess(response.CommandResponse);
    }
    var root = response[keys[0]];
    if (!root || !{}.hasOwnProperty.call(root, 'status')) {
        return root;
    }
    switch (root.status) {
        case 'Error': {
            var body = collapse(root);
            var Error_1 = body.Error, Reason = body.Reason, XPath = body.XPath;
            var reason = Error_1 || Reason || keys[0];
            if (XPath) {
                throw new exc_1.InvalidPathError(reason, XPath);
            }
            throw new exc_1.XAPIError(exc_1.UNKNOWN_ERROR, reason, body);
        }
        case 'ParameterError':
            throw new exc_1.ParameterError();
        case 'OK':
            return root;
        default:
            throw new exc_1.XAPIError(exc_1.INVALID_STATUS, "Invalid command status: " + root.status);
    }
}
function assertValidCommandResponse(response) {
    if (!{}.hasOwnProperty.call(response, 'CommandResponse')) {
        throw new exc_1.XAPIError(exc_1.INVALID_RESPONSE, 'Invalid command response: Missing "CommandResponse" attribute');
    }
    return assertResponseSuccess(response);
}
function createCommandResponse(response) {
    var root = assertValidCommandResponse(response);
    var collapsed = collapse(root);
    return Object.keys(collapsed).length ? collapsed : null;
}
exports.createCommandResponse = createCommandResponse;
function digObj(path, obj) {
    var parts = path.slice();
    var value = obj;
    var _loop_1 = function () {
        var part = parts.shift();
        if (Array.isArray(value)) {
            value = value.find(function (v) { return parseInt(v.id, 10) === part; });
        }
        else if (!{}.hasOwnProperty.call(value, part)) {
            return { value: undefined };
        }
        else {
            value = value[part];
        }
    };
    while (parts.length) {
        var state_1 = _loop_1();
        if (typeof state_1 === "object")
            return state_1.value;
    }
    return value;
}
function createDocumentResponse(request, response) {
    var _a = request.params, Path = _a.Path, Type = _a.Type;
    var isSchema = Type === 'Schema';
    var path = __spreadArray([], Path, true);
    var document = path[0].toLowerCase();
    if (isSchema && 'status'.startsWith(document)) {
        path[0] = 'StatusSchema';
    }
    else if ('configuration'.startsWith(document)) {
        path[0] = 'Configuration';
    }
    return digObj(path, response);
}
exports.createDocumentResponse = createDocumentResponse;
function createGetResponse(request, response) {
    if ({}.hasOwnProperty.call(response, 'CommandResponse')) {
        assertResponseSuccess(response.CommandResponse);
    }
    else {
        assertResponseSuccess(response);
    }
    return digObj(request.params.Path, collapse(response));
}
exports.createGetResponse = createGetResponse;
function createSetResponse(request, response) {
    if ({}.hasOwnProperty.call(response, 'CommandResponse')) {
        assertResponseSuccess(response.CommandResponse);
    }
    else {
        assertResponseSuccess(response);
    }
    if (Object.keys(response).length > 1) {
        var leaf = digObj(request.params.Path, response);
        if (leaf.error === 'True') {
            throw new exc_1.IllegalValueError(leaf.Value);
        }
    }
    return null;
}
exports.createSetResponse = createSetResponse;
