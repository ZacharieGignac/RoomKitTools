import XAPI from '.';
import { Registration } from './feedback';
import { Listener, Path } from './types';
export declare type AnyConstructor<T = object> = new (...args: any[]) => T;
export declare class Component {
    readonly xapi: XAPI;
    prefix: string;
    constructor(xapi: XAPI);
    normalizePath(path: Path): (string | number)[];
}
export interface Listenable<T> {
    on(path: Path, listener: Listener<T>): Registration;
    once(path: Path, listener: Listener<T>): Registration;
    off(): void;
}
export declare function Listenable<B extends AnyConstructor<Component>, T = any>(Base: B): B & AnyConstructor<Listenable<T>>;
export interface Gettable<T> {
    get(path: Path): Promise<T>;
}
export declare function Gettable<B extends AnyConstructor<Component>, T = any>(Base: B): B & AnyConstructor<Gettable<T>>;
export interface Settable<T> {
    set(path: Path, value: T): Promise<unknown>;
}
export declare function Settable<B extends AnyConstructor<Component>, T = number | string>(Base: B): B & AnyConstructor<Settable<T>>;
