"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var loglevel_1 = __importDefault(require("loglevel"));
if (!loglevel_1.default.isPatched) {
    var origMethodFactory_1 = loglevel_1.default.methodFactory;
    var loggers_1 = new Set();
    Object.assign(loglevel_1.default, {
        isPatched: true,
        methodFactory: function (methodName, logLevel, loggerName) {
            if (loggerName) {
                loggers_1.add(loggerName);
            }
            var rawMethod = origMethodFactory_1(methodName, logLevel, loggerName);
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                rawMethod.apply(void 0, __spreadArray(["[" + (loggerName || 'root') + "]"], args, false));
            };
        },
        getLoggers: function () {
            return Array.from(loggers_1);
        },
        setGlobalLevel: function (level) {
            var allLoggers = [loglevel_1.default].concat(loglevel_1.default
                .getLoggers()
                .map(function (name) { return loglevel_1.default.getLogger(name); }));
            allLoggers.forEach(function (logger) {
                logger.setLevel(level);
            });
        },
        setLevelTrace: function () {
            loglevel_1.default.setGlobalLevel('trace');
        },
        setLevelDebug: function () {
            loglevel_1.default.setGlobalLevel('debug');
        },
        setLevelInfo: function () {
            loglevel_1.default.setGlobalLevel('info');
        },
        setLevelWarn: function () {
            loglevel_1.default.setGlobalLevel('warn');
        },
        setLevelError: function () {
            loglevel_1.default.setGlobalLevel('error');
        },
    });
    loglevel_1.default.setLevel(loglevel_1.default.getLevel());
}
exports.default = loglevel_1.default.getLogger('jsxapi');
