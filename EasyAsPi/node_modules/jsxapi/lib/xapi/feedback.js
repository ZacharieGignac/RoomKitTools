"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackGroup = void 0;
var events_1 = require("events");
var log_1 = __importDefault(require("../log"));
var normalizePath_1 = __importDefault(require("./normalizePath"));
var FeedbackGroup = (function () {
    function FeedbackGroup(handlers) {
        this.handlers = handlers;
    }
    FeedbackGroup.prototype.add = function (handler) {
        this.handlers.push(handler);
        return this;
    };
    FeedbackGroup.prototype.remove = function (handler) {
        this.handlers = this.handlers.filter(function (h) { return h !== handler; });
        return this;
    };
    FeedbackGroup.prototype.off = function () {
        this.handlers.forEach(function (handler) {
            handler();
        });
        this.handlers = [];
        return this;
    };
    return FeedbackGroup;
}());
exports.FeedbackGroup = FeedbackGroup;
function defaultInterceptor(payload, emit) {
    emit(payload);
}
function dispatch(feedback, data, root, path) {
    if (root === void 0) { root = data; }
    if (path === void 0) { path = []; }
    if (Array.isArray(data)) {
        data.forEach(function (child) {
            dispatch(feedback, child, root, path);
            dispatch(feedback, child, root, path.concat(child.id));
        });
        return;
    }
    var emitPath = path.join('/').toLowerCase();
    feedback.eventEmitter.emit(emitPath, data, root, root.Id);
    if (typeof data === 'object') {
        Object.keys(data).forEach(function (key) {
            dispatch(feedback, data[key], root, path.concat(key));
        });
    }
}
var Feedback = (function () {
    function Feedback(xapi, interceptor) {
        if (interceptor === void 0) { interceptor = defaultInterceptor; }
        this.xapi = xapi;
        this.interceptor = interceptor;
        this.eventEmitter = new events_1.EventEmitter();
    }
    Feedback.prototype.on = function (path, listener) {
        var _this = this;
        log_1.default.info("new feedback listener on: " + path);
        var eventPath = (0, normalizePath_1.default)(path)
            .join('/')
            .toLowerCase();
        var registration = this.xapi.execute('xFeedback/Subscribe', {
            Query: (0, normalizePath_1.default)(path),
        });
        var wrapper;
        var idP = registration.then(function (_a) {
            var Id = _a.Id;
            wrapper = function (ev, root, id) {
                if (typeof id !== 'undefined' && id !== Id) {
                    return;
                }
                listener(ev, root);
            };
            _this.eventEmitter.on(eventPath, wrapper);
            return Id;
        });
        var off = function () {
            if (!wrapper) {
                return;
            }
            idP.then(function (Id) {
                _this.xapi.execute('xFeedback/Unsubscribe', { Id: Id });
            });
            _this.eventEmitter.removeListener(eventPath, wrapper);
        };
        off.registration = registration;
        return off;
    };
    Feedback.prototype.once = function (path, listener) {
        var _this = this;
        var off;
        var wrapped = function (ev, root) {
            if (typeof off === 'function') {
                off();
            }
            listener.call(_this, ev, root);
        };
        wrapped.listener = listener;
        off = this.on(path, wrapped);
        return off;
    };
    Feedback.prototype.off = function () {
        throw new Error('.off() is deprecated. Use return value deactivate handler from .on() instead.');
    };
    Feedback.prototype.dispatch = function (data) {
        var _this = this;
        this.interceptor(data, function (d) {
            if (d === void 0) { d = data; }
            return dispatch(_this, d);
        });
        return this;
    };
    Feedback.prototype.group = function (handlers) {
        return new FeedbackGroup(handlers);
    };
    return Feedback;
}());
exports.default = Feedback;
