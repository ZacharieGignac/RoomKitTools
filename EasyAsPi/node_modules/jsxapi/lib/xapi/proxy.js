"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var ACTIONS = ['get', 'set', 'on', 'once'];
function createProxy(thisArg, root, path) {
    if (path === void 0) { path = []; }
    var handlers = {
        apply: function (target, _, args) {
            if (typeof root === 'function') {
                return root.call.apply(root, __spreadArray([thisArg, path.join('/')], args, false));
            }
            throw new TypeError("Object is not callable: " + root);
        },
        get: function (target, property) {
            if (ACTIONS.includes(property)) {
                if (typeof root[property] !== 'function') {
                    throw new TypeError("Property is not callable: " + root + "[" + property + "]");
                }
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return root[property].apply(root, __spreadArray([path.join('/')], args, false));
                };
            }
            return createProxy(thisArg, root, path.concat(property));
        },
    };
    return new Proxy(root, handlers);
}
exports.default = createProxy;
