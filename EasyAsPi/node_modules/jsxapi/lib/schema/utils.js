"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.merge = exports.flatten = exports.filter = void 0;
function filter(schema, access) {
    var result = {};
    for (var _i = 0, _a = Object.entries(schema); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (Array.isArray(value)) {
            result[key] = value.map(function (v) { return filter(v, access); });
        }
        else if (typeof value !== 'object') {
            result[key] = value;
        }
        else if (!value.hasOwnProperty('access')) {
            var subtree = filter(value, access);
            if (Object.keys(subtree).length) {
                result[key] = subtree;
            }
        }
        else if (access.includes(value.access)) {
            result[key] = value;
        }
    }
    return result;
}
exports.filter = filter;
function flatten(arr) {
    var _a;
    return (_a = []).concat.apply(_a, arr);
}
exports.flatten = flatten;
function merge(a, b, path) {
    if (path === void 0) { path = []; }
    var result = __assign({}, a);
    for (var _i = 0, _a = Object.entries(b); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        var fullPath = path.concat(key);
        var pathStr = fullPath.join('.');
        if (!result.hasOwnProperty(key)) {
            result[key] = value;
        }
        else if (typeof value !== typeof result[key]) {
            throw new Error("Mismatching types: " + pathStr);
        }
        else if (Array.isArray(value)) {
            if (!Array.isArray(result[key])) {
                throw new Error("Unexpected array: " + pathStr);
            }
            if (typeof result[key][0] === 'object') {
                result[key][0] = merge(result[key][0], value[0], fullPath);
            }
            else {
                for (var _c = 0, value_1 = value; _c < value_1.length; _c++) {
                    var entry = value_1[_c];
                    if (!result[key].includes(entry)) {
                        result[key].push(entry);
                    }
                }
            }
        }
        else if (typeof value === 'object') {
            result[key] = merge(result[key], value, fullPath);
        }
        else if (result[key] !== value) {
            console.error("Warning: Mismatch on value for " + pathStr);
        }
    }
    return result;
}
exports.merge = merge;
