#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var REPL = __importStar(require("repl"));
var xdg_basedir_1 = __importDefault(require("xdg-basedir"));
var _1 = require("./");
var log_1 = __importDefault(require("./log"));
var fetch_1 = __importDefault(require("./schema/fetch"));
var generate_1 = __importDefault(require("./schema/generate"));
var version_1 = __importDefault(require("./version"));
function evalFile(source, xapi) {
    var context = new Function('xapi', source);
    context(xapi);
}
function startRepl(xapi) {
    var repl = REPL.start({});
    var cache = xdg_basedir_1.default.cache;
    if (cache && repl.setupHistory) {
        var jsxapiCache = path.join(cache, 'jsxapi');
        fs.mkdirSync(jsxapiCache, { recursive: true });
        repl.setupHistory(path.join(jsxapiCache, 'history'), function () { return undefined; });
    }
    repl.on('exit', function () { return xapi.close(); });
    repl.context.xapi = xapi;
}
function main() {
    var _this = this;
    commander_1.default
        .command('generate-api <hosts...>')
        .description('generate a typed XAPI based on schemas on <hosts>')
        .action(function (hosts) { return __awaiter(_this, void 0, void 0, function () {
        var xapis, docs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    xapis = hosts.map(function (host) { return (0, _1.connect)(host); });
                    return [4, (0, fetch_1.default)(xapis)];
                case 1:
                    docs = _a.sent();
                    console.log((0, generate_1.default)(docs));
                    xapis.forEach(function (xapi) { return xapi.close(); });
                    return [2];
            }
        });
    }); });
    commander_1.default
        .version(version_1.default)
        .arguments('<host> [file]')
        .description('connect to a codec and launch a repl')
        .option('-p, --port <port>', 'port to connect to')
        .option('-U, --username <user>', 'username to authenticate with', 'admin')
        .option('-P, --password <password>', 'password to authenticate with', '')
        .option('-C, --command <command>', 'command to execute on remote host', '')
        .option('-l, --loglevel <level>', 'set application log level (trace|debug|info|warn|error|silent)', /^(trace|debug|info|warn|error|silent)$/i, 'warn')
        .action(function (host, file, options) {
        if (!host) {
            log_1.default.error('Please specify a host to connect to');
            commander_1.default.help();
        }
        var source = file && fs.readFileSync(file);
        var xapi = (0, _1.connect)(host, options)
            .on('error', function (error) {
            log_1.default.error('xapi error:', error);
        })
            .on('ready', function () {
            if (source) {
                evalFile(source, xapi);
            }
            else {
                startRepl(xapi);
            }
        });
    })
        .parse(process.argv);
}
main();
