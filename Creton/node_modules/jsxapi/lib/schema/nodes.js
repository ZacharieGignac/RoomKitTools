"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = exports.ArrayTree = exports.Tree = exports.Member = exports.MainClass = exports.Interface = exports.Literal = exports.List = exports.Function = exports.Generic = exports.Plain = exports.ImportStatement = exports.Imports = exports.Root = exports.Node = void 0;
var redent_1 = __importDefault(require("redent"));
var Node = (function () {
    function Node() {
        this.children = [];
    }
    Node.prototype.addChild = function (child) {
        this.children.push(child);
        return child;
    };
    Node.prototype.addChildren = function (children) {
        this.children = this.children.concat(children);
    };
    return Node;
}());
exports.Node = Node;
var Root = (function (_super) {
    __extends(Root, _super);
    function Root(libName) {
        if (libName === void 0) { libName = 'jsxapi'; }
        var _this = _super.call(this) || this;
        _this.libName = libName;
        _this.imports = new Imports();
        _this.interfaceNames = new Set();
        _this.addChild(_this.imports);
        return _this;
    }
    Root.prototype.addChild = function (child) {
        if (child instanceof Interface) {
            if (this.interfaceNames.has(child.name)) {
                throw new Error("Interface already exists: " + child.name);
            }
            this.interfaceNames.add(child.name);
        }
        return _super.prototype.addChild.call(this, child);
    };
    Root.prototype.addImports = function (path, imports) {
        var fullPath = [this.libName, path].filter(function (x) { return !!x; }).join('/');
        this.imports.addImports(fullPath, imports);
    };
    Root.prototype.addInterface = function (name, extend) {
        var _this = this;
        if (extend === void 0) { extend = []; }
        var missing = extend.filter(function (e) { return !_this.interfaceNames.has(e); });
        if (missing.length) {
            throw new Error("Cannot add interface " + name + " due to missing interfaces: " + missing.join(', '));
        }
        return this.addChild(new Interface(name, extend));
    };
    Root.prototype.addMain = function (name, options) {
        if (options === void 0) { options = {}; }
        if (this.main) {
            throw new Error('Main class already defined');
        }
        var main = this.addChild(new MainClass(this, name, options));
        this.main = main;
        return main;
    };
    Root.prototype.getMain = function () {
        if (!this.main) {
            throw new Error('No main class defined');
        }
        return this.main;
    };
    Root.prototype.addGenericInterfaces = function () {
        var templateParam = new Plain('T');
        var gettable = this.addInterface('Gettable<T>');
        gettable.addChild(new Function('get', [], new Generic('Promise', templateParam)));
        var settable = this.addInterface('Settable<T>');
        settable.addChild(new Function('set', [['value', templateParam]], new Generic('Promise', 'void')));
        this.addImports('lib/xapi/feedback', ['Registration']);
        var registration = new Plain('Registration');
        var listenable = this.addInterface('Listenable<T>');
        var handler = new Function('handler', [['value', new Plain('T')]]);
        listenable.addChildren([
            new Function('on', [['handler', handler]], registration),
            new Function('once', [['handler', handler]], registration),
        ]);
        this.addChild(new (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            class_1.prototype.serialize = function () {
                return "type Configify<T> = [T] extends [object]\n  ? { [P in keyof T]: Configify<T[P]>; } & Gettable<T> & Listenable<T>\n  : Gettable<T> & Settable<T> & Listenable<T>;";
            };
            return class_1;
        }(Node))());
        this.addChild(new (function (_super) {
            __extends(class_2, _super);
            function class_2() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            class_2.prototype.serialize = function () {
                return "type Eventify<T> = { [P in keyof T]: Eventify<T[P]>; } & Listenable<T>;";
            };
            return class_2;
        }(Node))());
        this.addChild(new (function (_super) {
            __extends(class_3, _super);
            function class_3() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            class_3.prototype.serialize = function () {
                return "type Statusify<T> = { [P in keyof T]: Statusify<T[P]>; } & Gettable<T> & Listenable<T>;";
            };
            return class_3;
        }(Node))());
    };
    Root.prototype.serialize = function () {
        var lines = [];
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            lines.push(child.serialize());
        }
        return lines.join('\n\n');
    };
    return Root;
}(Node));
exports.Root = Root;
var Imports = (function (_super) {
    __extends(Imports, _super);
    function Imports() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.imports = new Map();
        return _this;
    }
    Imports.prototype.addImports = function (path, imports) {
        var importStatement = this.imports.get(path);
        if (!importStatement) {
            importStatement = new ImportStatement(path);
            this.imports.set(path, importStatement);
            this.addChild(importStatement);
        }
        importStatement.addImports(imports);
        return importStatement;
    };
    Imports.prototype.serialize = function () {
        return Array.from(this.imports.values())
            .map(function (i) { return i.serialize(); })
            .join('\n');
    };
    return Imports;
}(Node));
exports.Imports = Imports;
var ImportStatement = (function (_super) {
    __extends(ImportStatement, _super);
    function ImportStatement(moduleName, imports) {
        var _this = _super.call(this) || this;
        _this.moduleName = moduleName;
        _this.imports = new Set(imports || []);
        return _this;
    }
    ImportStatement.prototype.addImports = function (imports) {
        for (var _i = 0, imports_1 = imports; _i < imports_1.length; _i++) {
            var name_1 = imports_1[_i];
            this.imports.add(name_1);
        }
    };
    ImportStatement.prototype.serialize = function () {
        var imports = Array.from(this.imports);
        return "import { " + imports.join(', ') + " } from \"" + this.moduleName + "\";";
    };
    return ImportStatement;
}(Node));
exports.ImportStatement = ImportStatement;
function renderTree(nodes, terminator) {
    var serialized = nodes.map(function (n) { return "" + n.serialize() + terminator; });
    if (serialized.length) {
        serialized.unshift('');
        serialized.push('');
    }
    return (0, redent_1.default)(serialized.join('\n'), 2);
}
function vsToType(vs) {
    return typeof vs === 'string' ? new Plain(vs) : vs;
}
var Plain = (function () {
    function Plain(text) {
        this.text = text;
    }
    Plain.prototype.getType = function () {
        return this.text;
    };
    return Plain;
}());
exports.Plain = Plain;
var Generic = (function () {
    function Generic(name, inner) {
        this.name = vsToType(name);
        this.inner = vsToType(inner);
    }
    Generic.prototype.getType = function () {
        return this.name.getType() + "<" + this.inner.getType() + ">";
    };
    return Generic;
}());
exports.Generic = Generic;
var Function = (function (_super) {
    __extends(Function, _super);
    function Function(name, args, ret) {
        if (args === void 0) { args = []; }
        if (ret === void 0) { ret = new Plain('void'); }
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.args = args;
        _this.ret = ret;
        return _this;
    }
    Function.prototype.getType = function (separator) {
        if (separator === void 0) { separator = ' =>'; }
        var args = this.args.map(function (_a) {
            var n = _a[0], t = _a[1];
            return n + ": " + t.getType();
        }).join(', ');
        var ret = this.ret.getType();
        return "(" + args + ")" + separator + " " + ret;
    };
    Function.prototype.serialize = function () {
        return "" + this.name + this.getType(':');
    };
    return Function;
}(Node));
exports.Function = Function;
var List = (function () {
    function List(elementType) {
        this.elementType = elementType;
    }
    List.prototype.getType = function () {
        var elemType = this.elementType.getType();
        var withParens = this.elementType instanceof Literal ? "(" + elemType + ")" : elemType;
        return withParens + "[]";
    };
    return List;
}());
exports.List = List;
var Literal = (function () {
    function Literal() {
        var members = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            members[_i] = arguments[_i];
        }
        this.members = members.map(function (m) {
            if (typeof m === 'string') {
                return new Plain("'" + m + "'");
            }
            return m;
        });
    }
    Literal.prototype.getType = function () {
        return this.members.map(function (m) { return m.getType(); }).join(' | ');
    };
    return Literal;
}());
exports.Literal = Literal;
var Interface = (function (_super) {
    __extends(Interface, _super);
    function Interface(name, extend) {
        if (extend === void 0) { extend = []; }
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.extend = extend;
        return _this;
    }
    Interface.prototype.getType = function () {
        return this.name;
    };
    Interface.prototype.allOptional = function () {
        return !this.children.some(function (child) {
            return !(child instanceof Member) || child.isRequired;
        });
    };
    Interface.prototype.serialize = function () {
        var ext = this.extend.length ? " extends " + this.extend.join(', ') : '';
        var tree = renderTree(this.children, ';');
        return "export interface " + this.name + ext + " {" + tree + "}";
    };
    return Interface;
}(Node));
exports.Interface = Interface;
var MainClass = (function (_super) {
    __extends(MainClass, _super);
    function MainClass(root, name, options) {
        if (name === void 0) { name = 'TypedXAPI'; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this.connectGen = 'connectGen';
        _this.options = __assign({ base: 'XAPI', withConnect: true }, options);
        var imports = [_this.options.base];
        if (_this.options.withConnect) {
            imports.push(_this.connectGen);
        }
        root.addImports('', imports);
        return _this;
    }
    MainClass.prototype.serialize = function () {
        var exports = ["export default " + this.name + ";"];
        if (this.options.withConnect) {
            exports.push("export const connect = " + this.connectGen + "(" + this.name + ");");
        }
        return "export class " + this.name + " extends " + this.options.base + " {}\n\n" + exports.join('\n') + "\n\n" + _super.prototype.serialize.call(this) + " ";
    };
    return MainClass;
}(Interface));
exports.MainClass = MainClass;
var Member = (function (_super) {
    __extends(Member, _super);
    function Member(name, type, options) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.type = vsToType(type);
        _this.options = __assign({ docstring: '', required: true }, options);
        return _this;
    }
    Object.defineProperty(Member.prototype, "isRequired", {
        get: function () {
            return this.options.required;
        },
        enumerable: false,
        configurable: true
    });
    Member.prototype.formatDocstring = function () {
        if (!this.options.docstring) {
            return '';
        }
        return "/**\n" + this.options.docstring + "\n*/\n";
    };
    Member.prototype.serialize = function () {
        var optional = !('required' in this.options) || this.options.required ? '' : '?';
        var name = this.name.match(/^[a-z][a-z0-9]*$/i)
            ? this.name
            : "\"" + this.name + "\"";
        return "" + this.formatDocstring() + name + optional + ": " + this.type.getType();
    };
    return Member;
}(Node));
exports.Member = Member;
var Tree = (function (_super) {
    __extends(Tree, _super);
    function Tree(name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        return _this;
    }
    Tree.prototype.serialize = function () {
        var tree = renderTree(this.children, ',');
        return this.name + ": {" + tree + "}";
    };
    return Tree;
}(Node));
exports.Tree = Tree;
var ArrayTree = (function (_super) {
    __extends(ArrayTree, _super);
    function ArrayTree() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArrayTree.prototype.serialize = function () {
        return _super.prototype.serialize.call(this) + "[]";
    };
    return ArrayTree;
}(Tree));
exports.ArrayTree = ArrayTree;
var Command = (function (_super) {
    __extends(Command, _super);
    function Command(name, params, retval, options) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.params = params;
        if (retval) {
            _this.retval = vsToType(retval);
        }
        _this.options = __assign({ docstring: '', multiline: false }, options);
        return _this;
    }
    Command.prototype.formatDocstring = function () {
        if (!this.options || !this.options.docstring) {
            return '';
        }
        return "/**\n" + this.options.docstring + "\n*/\n";
    };
    Command.prototype.serialize = function () {
        var args = [];
        var hasBody = this.options.multiline;
        if (this.params) {
            var argsType = this.params.getType();
            var optional = !hasBody && this.params.allOptional() ? '?' : '';
            args.push("args" + optional + ": " + argsType);
        }
        if (hasBody) {
            args.push('body: string');
        }
        var argString = args.join(', ');
        var retval = this.retval ? this.retval.getType() : 'any';
        return "" + this.formatDocstring() + this.name + "<R=" + retval + ">(" + argString + "): Promise<R>";
    };
    return Command;
}(Node));
exports.Command = Command;
