import { Registration } from './feedback';
import { Component, Gettable, Listenable, Settable } from './mixins';
import { Listener, Path } from './types';
declare const Config_base: typeof Component & import("./mixins").AnyConstructor<Gettable<any>> & import("./mixins").AnyConstructor<Settable<string | number>> & import("./mixins").AnyConstructor<Listenable<any>>;
export declare class Config extends Config_base {
    prefix: string;
    normalizePath: (path: Path) => (string | number)[];
    on: <T = any>(path: Path, listener: Listener<T>) => Registration;
    once: <T = any>(path: Path, listener: Listener<T>) => Registration;
    off: () => void;
    get: <T = any>(path: Path) => Promise<T>;
    set: (path: Path, value: number | string) => Promise<any>;
}
declare const Event_base: typeof Component & import("./mixins").AnyConstructor<Listenable<any>>;
export declare class Event extends Event_base {
    prefix: string;
    normalizePath: (path: Path) => (string | number)[];
    on: <T = any>(path: Path, listener: Listener<T>) => Registration;
    once: <T = any>(path: Path, listener: Listener<T>) => Registration;
    off: () => void;
}
declare const Status_base: typeof Component & import("./mixins").AnyConstructor<Gettable<any>> & import("./mixins").AnyConstructor<Listenable<any>>;
export declare class Status extends Status_base {
    prefix: string;
    normalizePath: (path: Path) => (string | number)[];
    on: <T = any>(path: Path, listener: Listener<T>) => Registration;
    once: <T = any>(path: Path, listener: Listener<T>) => Registration;
    off: () => void;
    get: <T = any>(path: Path) => Promise<T>;
}
export {};
