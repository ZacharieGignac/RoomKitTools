"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseJSON = exports.JSONParser = void 0;
var stream_1 = require("stream");
var jsonparse_1 = __importDefault(require("jsonparse"));
var JSONParser = (function (_super) {
    __extends(JSONParser, _super);
    function JSONParser() {
        var _this = _super.call(this, { objectMode: true }) || this;
        _this.enc = 'utf8';
        _this.parser = new jsonparse_1.default();
        _this.reset();
        return _this;
    }
    JSONParser.prototype._flush = function (callback) {
        if (this.parser.stack.length) {
            this.onError(new Error('Unexpected end of input'));
        }
        callback();
    };
    JSONParser.prototype.reset = function () {
        this.parser = new jsonparse_1.default();
        this.parser.onError = this.onError.bind(this);
        this.parser.onValue = this.onValue.bind(this);
    };
    JSONParser.prototype.onError = function (e) {
        this.emit('error', e);
        this.reset();
    };
    JSONParser.prototype.onValue = function (value) {
        if (!this.parser.stack.length) {
            this.push(value);
        }
    };
    JSONParser.prototype._transform = function (chunk, _encoding, callback) {
        var _this = this;
        var data = chunk.toString(this.enc);
        data.split(/\n/).forEach(function (line) {
            try {
                _this.parser.write(line);
            }
            catch (error) {
                _this.onError(error);
            }
        });
        callback();
    };
    return JSONParser;
}(stream_1.Transform));
exports.JSONParser = JSONParser;
function parseJSON(json) {
    var obj;
    var parser = new JSONParser();
    parser.on('data', function (next) {
        obj = next;
    });
    parser.end(json);
    return obj;
}
exports.parseJSON = parseJSON;
